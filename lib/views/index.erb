<!DOCTYPE html>
<html>
 <head>
  <meta charset="UTF-8"></meta>
  <title>Poefy Online</title>
  <script src="https://tilde.town/~nossidge/jquery/src/jquery.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
  <link href="https://tilde.town/~nossidge/zelda/holy_grail.css" rel="stylesheet">
  <script language="javascript">

    var welcomeText;
    var desc_databases = <%= @desc_databases.to_json %>;
    var poetic_forms   = <%= @poetic_forms.to_json %>;

    // Cribbed from https://stackoverflow.com/a/8435261/139299
    function weightedRand(spec) {
      var i, sum = 0, r = Math.random();
      for (i in spec) {
        sum += spec[i];
        if (r <= sum) return i;
      }
    }

    // Get the poem from the JSON request.
    function getPoem() {
      let corpus   = document.getElementById("dropdown_databases").value;
      let form     = document.getElementById("dropdown_poetic_forms").value;
      let rhyme    = document.getElementById("text_rhyme").value;
      let indent   = document.getElementById("text_indent").value;
      let syllable = document.getElementById("text_syllable").value;
      let regex    = document.getElementById("text_regex").value;
      let acrostic = document.getElementById("text_acrostic").value;

      // Create options object.
      let options = {};
      options.corpus = corpus;

      // If we aren't using the form, we are using the rhyme string.
      let usePoeticForm = $("#poetic_form").hasClass("active");
      if (usePoeticForm) {
        options.form = form;
      } else {
        options.rhyme = rhyme;
      }

      // Add optional attributes.
      if (indent   != "") options.indent   = indent;
      if (syllable != "") options.syllable = syllable;
      if (regex    != "") options.regex    = regex;
      if (acrostic != "") options.acrostic = acrostic;

      // Serialise the object to URL parameters.
      // Write response to the main div.
      $.getJSON("poem?" + $.param(options), function(data) {
        if (data.length != 0) {
          let poem = data.join("<br>").replace(/ /g, "&nbsp;");
          $("#poem_results").html(poem);
        } else {
          $("#poem_results").html("[A poem cannot be generated using the selected criteria]");
        }
      });
    }

    // Display the corpus description.
    function selectDatabase(database) {
      document.getElementById("dropdown_databases").value = database;
      $("#database_desc").text(desc_databases[database]);
      getPoem();
    }

    // Toggle between named form and bespoke rhyme string.
    function togglePoemType() {
      $("#poetic_form").toggleClass("active");
      $("#poetic_form_glyphicon").toggleClass("glyphicon-ok");
      $("#poetic_form_glyphicon").toggleClass("glyphicon-remove");
      $("#rhyme").toggleClass("active");
      $("#rhyme_glyphicon").toggleClass("glyphicon-ok");
      $("#rhyme_glyphicon").toggleClass("glyphicon-remove");
    }
    function setPoemTypePoeticForm() {
      if ( !$("#poetic_form").hasClass("active") ) togglePoemType();
    }
    function setPoemTypeRhyme() {
      if ( !$("#rhyme").hasClass("active") ) togglePoemType();
    }

    // Show help text for a specific poem option.
    function helpText(helpTextID) {
      $("#poem_results").html(welcomeText);
      $("#" + helpTextID).toggleClass("hidden");
    }

    // Determine whether the rhyme string is valid.
    // Directly taken from the 'poefy' Ruby gem.
    function parseRhymeString(rhyme_string) {
      let tokens = [];
      let buffer = '';

      // Split string to tokens.
      $.each( rhyme_string.split(''), function(index, char) {
        if ( buffer != '' && (isNaN(Number(char)) || (char == ' ')) ) {
          tokens.push(buffer);
          buffer = '';
        }
        buffer += char;
      })
      tokens.push(buffer);

      // Handle invalid tokens.
      let boolean_array = $.map( tokens, function(char) {
        keep = char.replace(/[^A-Z,0-9]/g, "");
        return (keep == "" || !Number(keep));
      })

      // Not valid if there are any 'false' elements.
      let valid = boolean_array.reduce( function(sum, i) {
        return (sum && i);
      });

      // Get the rhyme letter for each token.
      let rhymes = $.map( tokens, function(char) {
        return char.toLowerCase().replace(/[^a-z ]/g, "");
      })

      return { tokens: tokens, rhymes: rhymes, valid: valid }
    }

    // Highlight the rhyme textbox if it's invalid.
    function highlightInvalidRhyme() {
      rhymeString = document.getElementById("text_rhyme").value;
      rhymeParsed = parseRhymeString(rhymeString);
      let elem = $("#text_rhyme").parent();
      if (rhymeParsed.valid) {
        elem.removeClass("has-error");
      } else {
        elem.addClass("has-error");
      }
    }

    // Randomise option string based on the rhyme string.
    function randomIndentation() {
      let indentString = "";

      // Get rhyme string from textbox or from poetic form.
      let rhymeString;
      let usePoeticForm = $("#poetic_form").hasClass("active");
      if (usePoeticForm) {
        let form = document.getElementById("dropdown_poetic_forms").value;
        rhymeString = poetic_forms[form].rhyme;
      } else {
        rhymeString = document.getElementById("text_rhyme").value;
      }

      // Some poetic forms have multiple rhymes to choose from.
      // So if it's a single string, coerce to flattened array.
      let rhymeStrings = [].concat(...new Array(rhymeString));

      // Select a random rhyme from the array, and use that.
      let index = Math.floor(Math.random() * rhymeStrings.length);
      rhymeString = rhymeStrings[index];

      // Parse to tokens and rhymes.
      let rhymeParsed = parseRhymeString(rhymeString);

      // Get a list of the unique rhymes.
      let uniques = [...new Set(rhymeParsed.rhymes)];

      // Don't do anything if the rhyme string is invalid or empty.
      let empty = (uniques.length == 1 && uniques[0].trim() == "");
      if (rhymeParsed.valid && !empty) {

        // This approach is pretty naive, but it should be okay.
        // Assign each unique rhyme a weighted, pseudo-random indentation.
        let weight = {0:0.5, 1:0.4, 2:0.1};
        let rhymeIndent = {};
        $.each(uniques, function(index, char) {
          var output = (char == " ") ? " " : weightedRand(weight);
          rhymeIndent[char] = output;
        });

        // Then map it back to the rhyme array.
        indentString = $.map( rhymeParsed.rhymes, function(char) {
          return rhymeIndent[char];
        }).join("");
      }

      // Write that back to the DOM and generate a new poem.
      $("#text_indent").val(indentString);
      getPoem();
    }

    // Onload, select 'shakespeare' and 'sonnet'.
    // Set up listeners for the toggle-able inputs.
    $(document).ready(function() {
      welcomeText = $("#poem_results").html();
      $("#welcome_text").toggleClass("hidden");
      let elem = document.getElementById("dropdown_databases");
      elem.value = "shakespeare";
      $("#database_desc").text(desc_databases[elem.value]);
      document.getElementById("dropdown_poetic_forms").value = "sonnet";
      $("#dropdown_poetic_forms").focus(setPoemTypePoeticForm);
      $("#text_rhyme").focus(setPoemTypeRhyme);
      $("#text_rhyme").change(highlightInvalidRhyme);
      $("#text_rhyme").keyup(highlightInvalidRhyme);
    });
  </script>
  <style type="text/css">
    body {
      min-height: 100vh;
    }
    input {
      text-align: left;
    }
    .header_div {
      margin: 10px;
    }
    .header_left {
      flex: 0 0 256px;
      margin-top: 0px;
      margin-left: 0px;
    }
    .header_right {
      flex: 0 0 44px;
      margin-left: 8px;
      margin-right: 0px;
    }
    .top_button {
      width: 100px;
    }
    .col_left {
      flex: 0 0 20em;
      min-height: 358px;
    }
    .col_middle {
      background-color: white;
      padding: 0px;
    }
    #save {
      margin: 0px 0px 5px 0px;
    }
    .btn_tags {
      height: 44px;
    }
    #poem_results {
      font-size: 120%;
      margin: 12px;
    }
    #database_desc{
      font-size: 200%;
    }
    .header_title {
      text-align: left;
      margin-top: 4px;
      margin-left: 24px;
    }
    .poem_option p {
      float: left;
    }
    .tiny_hover_buttons {
      float: right;
    }

    /*
    Hover effect nabbed from here (class is 'the-icons')
    http://www.plugolabs.com/twitter-bootstrap-button-generator/
    */
    .tiny_hover_buttons a {
      text-decoration: none;
      color: black;
      width: 20px;
      height: 20px;
      padding: 0px 0px 0px 6px;
      float: left;
      -moz-transition: all 0.15s ease-in-out;
      -webkit-transition: all 0.15s ease-in-out;
      -o-transition: all 0.15s ease-in-out;
      transition: all 0.15s ease-in-out;
    }
    .tiny_hover_buttons a:hover, .tiny_hover_buttons a.active {
      -webkit-box-shadow:
        0 0 3px #c8c8c8,
        transparent 0 0 0,
        transparent 0 0 0,
        transparent 0 0 0,
        transparent 0 0 0;
      -moz-box-shadow:
        0 0 3px #c8c8c8,
        transparent 0 0 0,
        transparent 0 0 0,
        transparent 0 0 0,
        transparent 0 0 0;
      box-shadow:
        0 0 3px #c8c8c8,
        transparent 0 0 0,
        transparent 0 0 0,
        transparent 0 0 0,
        transparent 0 0 0;
      background: #fff;
    }
  </style>
 </head>
 <body class="border">
  <header class="border">
    <div class="header_div">
      <div class="header_title input-group-lg">
        <span id="database_desc"></span>
      </div>
      <div class="header_left">
        <select id="dropdown_databases" class="form-control input-lg"
                onchange="selectDatabase(this.value)">
          <% @all_databases.each do |i| %>
            <option value="<%= i %>"><%= i %></option>
          <% end %>
        </select>
      </div>
      <div class="header_right">
        <a class="btn btn-default btn-lg" title="Fork me on GitHub"
            href="https://github.com/nossidge/poefy_online">
          <svg viewBox="0 0 16 15" width="22" height="18">
            <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"/>
          </svg>
        </a>
      </div>
    </div>
  </header>
  <div class="contents">
    <div id="col_left" class="col_left border">
      <div id="col_left_content">
        <a class="btn btn-default btn-lg btn-block btn_tags"
            title="Generate new poem" onclick="getPoem()">
          <span id="save_glyphicon" class="glyphicon glyphicon-refresh"></span>
        </a>
        <br>
        <p>Poetic form</p>
        <div class="input-group">
          <a id="poetic_form" title="Toggle" onclick="togglePoemType();"
              class="input-group-addon btn btn-default btn-lg btn-block btn_tags active">
            <span id="poetic_form_glyphicon" class="glyphicon glyphicon-ok"></span>
          </a>
          <select id="dropdown_poetic_forms" class="form-control input-lg"
                  onchange="getPoem()">
            <% @poetic_forms.keys.each do |i| %>
              <option value="<%= i %>"><%= i %></option>
            <% end %>
          </select>
        </div>
        <br>
        <p>Rhyme scheme</p>
        <div class="input-group">
          <a id="rhyme" title="Toggle" onclick="togglePoemType();"
              class="input-group-addon btn btn-default btn-lg btn-block btn_tags">
            <span id="rhyme_glyphicon" class="glyphicon glyphicon-remove"></span>
          </a>
          <input id="text_rhyme" type="text" class="form-control input-lg" />
        </div>
        <br>
        <div class="poem_option">
          <p>Indentation</p>
          <span class="tiny_hover_buttons">
            <a href="#" onclick="randomIndentation()" title="Randomise">!</a>
            <a href="#" onclick="helpText('help_indentation')" title="Display help">?</a>
          </span>
          <div class="btn-block">
            <input id="text_indent" type="text" class="form-control input-lg" />
          </div>
        </div>
        <br>
        <div class="poem_option">
          <p>Syllables</p>
          <span class="tiny_hover_buttons">
            <a href="#" title="Randomise">!</a>
            <a href="#" onclick="helpText('help_syllables')" title="Display help">?</a>
          </span>
          <div class="btn-block">
            <input id="text_syllable" type="text" class="form-control input-lg" />
          </div>
        </div>
        <br>
        <p>Regex</p>
        <div class="btn-block">
          <input id="text_regex" type="text" class="form-control input-lg" />
        </div>
        <br>
        <p>Acrostic</p>
        <div class="btn-block">
          <input id="text_acrostic" type="text" class="form-control input-lg" />
        </div>
      </div>
    </div>
    <div id="col_middle" class="col_middle border" name="poem_frame">
      <div id="poem_results">
        <div id="welcome_text" class="hidden">
          <p>Welcome to the online <a href="https://github.com/nossidge/poefy">Poefy</a> generator.</p>
          <p>Select the corpus database at the top.</p>
          <p>Then choose from the options on the left.</p>
          <p>For a new poem, click the 'refresh' button.</p>
          <br>
          <p>Project currently <a href="https://github.com/nossidge/poefy_online">in progress</a>.</p>
          <p>Most features are not yet implemented.</p>
        </div>
        <div id="help_indentation" class="hidden">
          <h3>Indentation</h3>
          <p>Indent each line by a certain number of spaces.</p>
          <pre>Corpus:        shakespeare
Rhyme scheme:  abab aabb
Indentation:   0101 0012

O! what a mansion have those vices got
&nbsp;&nbsp;And more, much more, than in my verse can sit,
Nay, if you read this line, remember not
&nbsp;&nbsp;For whether beauty, birth, or wealth, or wit,

But what's so blessed-fair that fears no blot?
Why should my heart think that a several plot,
&nbsp;&nbsp;Thy merit hath my duty strongly knit,
&nbsp;&nbsp;&nbsp;&nbsp;Your own glass shows you when you look in it.</pre>
        </div>
        <div id="help_syllables" class="hidden">
          <h3>Syllables</h3>
          <p>Specify syllable count allowed for each line. There's a few valid forms it can take.</p>
          <p>If the string is just one number, all lines will be that number of syllables long.</p>
          <pre>Corpus:        whitman
Rhyme scheme:  abab
Syllables:     6

To One Shortly to Die
looks at the oats and rye,
making of those for war,
By Broad Potomac's Shore
beautiful than the sky.</pre>
          <p>If the string is comma delimited, all lines will be any of those numbers of syllables long.</p>
          <pre>Corpus:        whitman
Rhyme scheme:  abab
Syllables:     4,8,12

Signing for Soul and Body, set to them my name,
When I Peruse the Conquer'd Fame
He is thinly clothed, he leans forward as he runs,
Sacred shape of the bearer of daughters and sons,
On, on ye jocund twain! continue on the same!</pre>
          <p>If the string is an array encased in [square brackets], each element corresponds to a line in the output.</p>
          <pre>Corpus:        whitman
Rhyme scheme:  aabba
Syllables:     [8,8,5,5,8]

Thus by blue Ontario's shore,
Give me the pay I have served for,
refuse, all attend,
for my dearest friend,
be the stake, and respite no more.</pre>
          <p>If the string is a hash encased in {curly brackets}, the key will be used to match the line number. You can use '=>' or ':' as the assignment symbol. Keys of '0' are used as the default value.</p>
          <pre>Corpus:        whitman
Rhyme scheme:  aabba
Syllables:     {0=>8,3=>5,4=>5}

Sail out for Good, Eidolon Yacht!
A glimpse through an interstice caught,
Sit a while dear son,
others for deeds done,
I know very well I could not.</pre>
          <p>Values can be an exact integer syllable count, or an array of acceptable counts.</p>
          <pre>Corpus:        whitman
Rhyme scheme:  aabba
Syllables:     {0=>[8,9],3=>[4,5,6],4=>[4,5,6]}

their flesh against me as I sat,
and not hit, that which I hinted at;
Poets to Come
joints proportion'd and plumb.
To be in any form, what is that?</pre>
          <p>Keys of negative integers count from the final line backwards.</p>
          <pre>Corpus:        whitman
Rhyme scheme:  aabba
Syllables:     {0:4,-1:20}

To-Day and Thee
Far, far at sea,
catching disease.
toward the knees,
I believe you are latent with unseen existences, you are so dear to me.</pre>
        </div>
      </div>
    </div>
  </div>
 </body>
</html>
